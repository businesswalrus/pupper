name: Code Quality

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting
        run: |
          npx prettier --check "src/**/*.{ts,js,json}" || {
            echo "::error::Code formatting issues found. Run 'npx prettier --write src/**/*.{ts,js,json}' to fix."
            exit 1
          }

      - name: Run ESLint
        run: |
          npm run lint -- --format=json --output-file=eslint-report.json || true
          npm run lint

      - name: Check for TypeScript errors
        run: npm run typecheck

      - name: Check for unused dependencies
        run: |
          npx depcheck --json > depcheck-report.json || true
          npx depcheck

      - name: Check for circular dependencies
        run: |
          npx madge --circular --extensions ts ./src || {
            echo "::error::Circular dependencies detected!"
            npx madge --circular --extensions ts ./src
            exit 1
          }

      - name: Generate dependency graph
        run: |
          npx madge --image dependency-graph.svg ./src
          echo "Dependency graph generated"

      - name: Check bundle size
        run: |
          npm run build
          echo "## Bundle Size Report" > bundle-report.md
          echo "\`\`\`" >> bundle-report.md
          du -sh dist/* | sort -h >> bundle-report.md
          echo "\`\`\`" >> bundle-report.md

      - name: Run complexity analysis
        run: |
          npx ts-complexity-cli src/**/*.ts --limit 20 || {
            echo "::warning::High complexity files found"
          }

      - name: Check for TODO/FIXME comments
        run: |
          echo "## TODO/FIXME Comments" > todo-report.md
          grep -rn "TODO\|FIXME" src --include="*.ts" >> todo-report.md || echo "No TODO/FIXME comments found" >> todo-report.md

      - name: Upload reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-reports
          path: |
            eslint-report.json
            depcheck-report.json
            dependency-graph.svg
            bundle-report.md
            todo-report.md

      - name: Comment PR with quality metrics
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## Code Quality Report\n\n';
            
            // ESLint summary
            if (fs.existsSync('eslint-report.json')) {
              const eslintReport = JSON.parse(fs.readFileSync('eslint-report.json', 'utf8'));
              const errorCount = eslintReport.reduce((sum, file) => sum + file.errorCount, 0);
              const warningCount = eslintReport.reduce((sum, file) => sum + file.warningCount, 0);
              
              comment += `### ESLint Results\n`;
              comment += `- ❌ Errors: ${errorCount}\n`;
              comment += `- ⚠️ Warnings: ${warningCount}\n\n`;
            }
            
            // Bundle size
            if (fs.existsSync('bundle-report.md')) {
              const bundleReport = fs.readFileSync('bundle-report.md', 'utf8');
              comment += bundleReport + '\n';
            }
            
            // TODOs
            if (fs.existsSync('todo-report.md')) {
              const todoReport = fs.readFileSync('todo-report.md', 'utf8');
              const todoCount = (todoReport.match(/TODO/g) || []).length;
              const fixmeCount = (todoReport.match(/FIXME/g) || []).length;
              
              if (todoCount > 0 || fixmeCount > 0) {
                comment += `### Outstanding Items\n`;
                comment += `- 📝 TODOs: ${todoCount}\n`;
                comment += `- 🔧 FIXMEs: ${fixmeCount}\n\n`;
              }
            }
            
            comment += `\n[View full reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('## Code Quality Report')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        env:
          NODE_ENV: test
        run: npm test -- --coverage --coverageReporters=lcov

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=businesswalrus_pupper
            -Dsonar.organization=businesswalrus
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.test.inclusions=**/*.test.ts,**/*.spec.ts
            -Dsonar.typescript.tsconfigPath=tsconfig.json

  accessibility:
    name: Accessibility Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for accessibility in code comments
        run: |
          echo "## Accessibility Considerations" > accessibility-report.md
          echo "" >> accessibility-report.md
          
          # Check for ARIA attributes in code
          grep -rn "aria-\|role=" src --include="*.ts" >> accessibility-report.md || echo "No ARIA attributes found in TypeScript files" >> accessibility-report.md
          
          # Check for accessibility-related TODOs
          echo "" >> accessibility-report.md
          echo "### Accessibility TODOs:" >> accessibility-report.md
          grep -rn "TODO.*accessib\|TODO.*a11y" src --include="*.ts" >> accessibility-report.md || echo "No accessibility TODOs found" >> accessibility-report.md

      - name: Upload accessibility report
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-report
          path: accessibility-report.md